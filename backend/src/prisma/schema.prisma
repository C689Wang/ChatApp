datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String 
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  conversations ConversationFriend[]
  emailVerified DateTime?
  image         String?
  messages      Message[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  friends           ConversationFriend[]
  messages          Message[]
  latestMessage     Message? @relation(name: "latestConversationMessage", fields:[latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId   String? @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ConversationFriend {
  id                      String  @id @default(auto()) @map("_id") @db.ObjectId
  user                    User @relation(fields: [userId], references: [id])
  userId                  String 
  conversation            Conversation @relation(fields: [conversationId], references: [id])
  conversationId          String
  hasSeenLatestMessage    Boolean
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Message {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String
  sender          User @relation(fields: [senderId], references: [id])
  senderId        String
  body            String
  isLatestIn      Conversation? @relation(name: "latestConversationMessage")
}